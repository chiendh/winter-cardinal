plugins {
	id 'jacoco'
	id 'java'
	id 'maven-publish'
	id 'signing'
	id 'net.researchgate.release' version '2.6.0'
	id 'de.marcphilipp.nexus-publish' version '0.3.0'
	id 'io.codearte.nexus-staging' version '0.21.0'
	id 'net.minecrell.licenser' version '0.4.1'
}

group = 'com.github.winter-cardinal'
archivesBaseName = 'winter-cardinal'
version = new groovy.json.JsonSlurper().parseText(file('package.json').text).version

sourceCompatibility = 8
targetCompatibility = 8

// REPOSITORY
repositories {
	jcenter()
}

// JAR
jar {
	manifest {
		attributes( 'Implementation-Title': archivesBaseName )
		attributes( 'Automatic-Module-Name': 'wcardinal' )
		attributes( 'Implementation-Version': version )
	}
}

task copyLicense(type: Copy) {
	from file('./LICENSE')
	into file('./src/main/resources/META-INF/')
}
compileJava.dependsOn copyLicense

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
	exclude 'META-INF/**'
}

javadoc {
	options.locale = 'en_US'
	options.charSet = 'UTF-8'
	options.encoding = 'UTF-8'
	options.jFlags '-Dfile.encoding=UTF-8'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

// PUBLISHING
publishing {
	publications {
		mavenJava( MavenPublication ) {
			pom {
				name = 'Winter Cardinal'
				description = 'A library for real-time web applications build on top of the Spring framework'
				packaging = 'jar'
				url = 'https://github.com/winter-cardinal/winter-cardinal'

				scm {
					url = 'https://github.com/winter-cardinal/winter-cardinal'
					connection = 'scm:git@github.com:winter-cardinal/winter-cardinal.git'
					developerConnection = 'scm:git@github.com:winter-cardinal/winter-cardinal.git'
				}

				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}

				developers {
					developer {
						id = project.findProperty('ossrhUsername') ?: ''
						name = project.findProperty('ossrhName') ?: ''
						email = project.findProperty('ossrhUsername') ?: ''
					}
				}
			}
			from components.java
			artifact sourcesJar
			artifact javadocJar
		}
	}
}

signing {
	sign( publishing.publications )
}

nexusPublishing {
	repositories {
		sonatype {
			packageGroup = group
			username = project.findProperty('ossrhUsername') ?: ''
			password = project.findProperty('ossrhPassword') ?: ''
		}
	}
}

nexusStaging {
	packageGroup = group
	username = project.findProperty('ossrhUsername') ?: ''
	password = project.findProperty('ossrhPassword') ?: ''
}

// DEPENDENCIES
dependencies {
	compile 'org.springframework.boot:spring-boot-starter-websocket:2.0.5.RELEASE'
	compile 'org.jdeferred:jdeferred-core:1.2.6'
	compile 'com.google.guava:guava:27.0.1-jre'
	compile 'org.webjars:webjars-locator:0.34'

	testCompile 'org.springframework.boot:spring-boot-starter-security:2.0.5.RELEASE'
	testCompile 'org.springframework.boot:spring-boot-starter-thymeleaf:2.0.5.RELEASE'
	testCompile 'junit:junit:4.12'
}

// TEST
jacoco {
	toolVersion = '0.8.2'
}

test {
	exclude 'manual/**'
}

// TYPESCRIPT
boolean isWindows(){
	return System.getProperty( 'os.name' )
		.toLowerCase( Locale.ROOT )
		.contains( 'windows' );
}
String COMPILE_JAVASCRIPT_OUTDIR = 'src/main/resources/META-INF/resources/webjars/wcardinal/'
task compileJavaScript( type: Exec ){
	inputs.files( 'package.json' )
	inputs.files( 'rollup.config.js' )
	inputs.files( 'tsconfig.json' )
	inputs.files( 'tslintrc.json' )
	inputs.files( fileTree(
		dir: 'src/main/typescript',
		exclude: '*.js*'
	))

	outputs.dir( COMPILE_JAVASCRIPT_OUTDIR )

	commandLine(
		(isWindows() ? [ 'cmd', '/c' ] : []) +
		[ 'npm', 'run', 'build' ]
	)
}
compileJava.dependsOn compileJavaScript
task cleanJavaScript {
	doLast {
		delete COMPILE_JAVASCRIPT_OUTDIR
	}
}
clean.dependsOn cleanJavaScript

// License
license {
	tasks {
		directory {
			files = project.files( 'src/' )
		}
	}

	style {
		put( 'ts', 'BLOCK_COMMENT' )
		put( 'html', new net.minecrell.gradle.licenser.header.CommentHeaderFormat( 'HTML', ~/^\s*<!--/, ~/-->\s*(.*?)$/, null, '<!--', '', '-->' ) )
	}

	header = file( 'LICENSE_HEADER' )

	include '**/*.java'
	include '**/*.ts'
	include '**/*.js'
	include '**/*.html'

	exclude '**/META-INF/**'
	exclude '**/javascript/**'
	exclude '**/pixi.js'
	exclude '**/pixi.min.js'
}

// Java API document
task compileJavaApiDocument( type: Copy, dependsOn: javadoc ) {
	doFirst {
		delete './docs/api/java'
	}

	from "$buildDir/docs/javadoc"
	into './docs/api/java'
}
